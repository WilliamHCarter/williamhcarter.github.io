<div class="relative pc:h-[70svh] h-[65svh] overflow-hidden flex">
  <!-- Blurred Background -->
  <div class="fixed w-full h-full z-[2] backdrop-blur-md pc:backdrop-blur-lg bg-[ffffff60]"></div>

  <!-- Floating Orbs -->
  <canvas id="orbs" class="z-[0] absolute top-0 left-0 w-full h-full"></canvas>

  <!-- Content -->
  <div class="z-[3] flex flex-col items-center justify-center h-full w-full animate-intro-100 mt-5">
    <h2 class="text-5xl font-semibold">Will Carter</h2>
    <p class="text-xl mt-1">ML Engineer & Full Stack Developer</p>
    <p id="fps"></p>
  </div>
</div>

<!-- Orb Motion Script -->

<script>
  const canvas = document.getElementById("orbs") as HTMLCanvasElement;
  const gl =
    canvas.getContext("webgl") ||
    (canvas.getContext("experimental-webgl") as WebGLRenderingContext);

  if (!gl) {
    console.error("WebGL is not supported in this browser.");
  }
  const MAX_DIM = 500;
  const ORB_SPEED = 0.5;

  function sizeCanvas() {
    const larger = Math.max(canvas.offsetWidth, canvas.offsetHeight);
    const scale = larger > MAX_DIM ? larger / MAX_DIM : 1;
    canvas.width = canvas.offsetWidth / scale;
    canvas.height = canvas.offsetHeight / scale;
  }
  sizeCanvas();
  addEventListener("resize", sizeCanvas);

  let orbSize = 0.024 * Math.max(canvas.width, canvas.height);
  if (canvas.height >= canvas.width) {
    orbSize *= 2;
  }

  const orbPositions: [number, number][] =
    canvas.width >= canvas.height
      ? [
          [canvas.width * 0.2, canvas.height * 0.2],
          [canvas.width * 0.7, canvas.height * 0.3],
          [canvas.width * 0.4, canvas.height * 0.6],
          [canvas.width * 0.8, canvas.height * 0.8],
        ]
      : [
          [canvas.width * 0.7, canvas.height * 0.3],
          [canvas.width * 0.3, canvas.height * 0.8],
          [canvas.width * 0.6, canvas.height * 0.4],
          [canvas.width * 0.2, canvas.height * 0.2],
        ];

  const orbColors: [number, number, number][] = [
    [82 / 255, 70 / 255, 1], // Darker blue
    [62 / 255, 226 / 255, 196 / 255], // Pastel green
    [198 / 255, 125 / 255, 1], // Pastel purple
    [170 / 255, 226 / 255, 1], // Pastel blue
  ];

  const orbRadii = [orbSize, orbSize, orbSize, orbSize];
  const orbSpeeds: [number, number][] = [
    [ORB_SPEED, ORB_SPEED],
    [-ORB_SPEED, -ORB_SPEED],
    [-ORB_SPEED, ORB_SPEED],
    [-ORB_SPEED, -ORB_SPEED],
  ];

  const THRESHOLD = 0.5;
  const influenceFactor = 0.8 * (2 / (orbPositions.length * 0.6));

  const vertexShaderSource = `
    attribute vec2 a_position;

    void main() {
      gl_Position = vec4(a_position, 0.0, 1.0);
    }
  `;

  const fragmentShaderSource = `
  precision highp float;

  uniform vec2 u_resolution;
  uniform vec2 u_orbPositions[4];
  uniform vec3 u_orbColors[4];
  uniform float u_orbRadii[4];
  uniform float u_threshold;
  uniform float u_influenceFactor;

  void main() {
    vec2 fragCoord = gl_FragCoord.xy;
    float totalShapeInfluence = 0.0;
    vec3 totalColorInfluence = vec3(0.0);
    vec3 color = vec3(0.0);

    for (int i = 0; i < 4; i++) {
        vec2 orbPosition = u_orbPositions[i];
        vec3 orbColor = u_orbColors[i];
        float orbRadius = u_orbRadii[i];

        vec2 delta = fragCoord - orbPosition;
        float distanceSquared = dot(delta, delta);
        float colorInfluence = orbRadius * 150.0 / (distanceSquared + 0.00001);

        totalColorInfluence += colorInfluence;
        color += orbColor * colorInfluence;

        float shapeInfluence = colorInfluence;
        if (shapeInfluence < u_threshold) {
            shapeInfluence *= u_influenceFactor;
        }
        totalShapeInfluence += shapeInfluence;
    }

    if (totalShapeInfluence > u_threshold) {
        vec3 blendedColor;
        if (totalShapeInfluence > 0.0) {
            blendedColor = color / totalColorInfluence;
        } else {
            blendedColor = vec3(0.0);
        }
        gl_FragColor = vec4(blendedColor, 1.0);
    } else {
        gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);
    }
  }
  `;
  gl.viewport(0, 0, canvas.width, canvas.height);
  const vertexShader = gl.createShader(gl.VERTEX_SHADER) as WebGLShader;
  gl.shaderSource(vertexShader, vertexShaderSource);
  gl.compileShader(vertexShader);

  const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER) as WebGLShader;
  gl.shaderSource(fragmentShader, fragmentShaderSource);
  gl.compileShader(fragmentShader);

  const program = gl.createProgram() as WebGLProgram;
  gl.attachShader(program, vertexShader);
  gl.attachShader(program, fragmentShader);
  gl.linkProgram(program);

  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    console.error("Failed to link shader program:", gl.getProgramInfoLog(program));
  }

  gl.useProgram(program);

  const positionAttribute = gl.getAttribLocation(program, "a_position");
  const resolutionUniform = gl.getUniformLocation(program, "u_resolution");
  const orbPositionsUniform = gl.getUniformLocation(program, "u_orbPositions");
  const orbColorsUniform = gl.getUniformLocation(program, "u_orbColors");
  const orbRadiiUniform = gl.getUniformLocation(program, "u_orbRadii");
  const thresholdUniform = gl.getUniformLocation(program, "u_threshold");
  const influenceFactorUniform = gl.getUniformLocation(program, "u_influenceFactor");

  const positionBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
  gl.bufferData(
    gl.ARRAY_BUFFER,
    new Float32Array([-1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0]),
    gl.STATIC_DRAW
  );

  gl.enableVertexAttribArray(positionAttribute);
  gl.vertexAttribPointer(positionAttribute, 2, gl.FLOAT, false, 0, 0);
  gl.uniform2f(resolutionUniform, canvas.width, canvas.height);
  gl.uniform2fv(orbPositionsUniform, orbPositions.flat());
  gl.uniform3fv(orbColorsUniform, orbColors.flat());
  gl.uniform1fv(orbRadiiUniform, orbRadii);
  gl.uniform1f(thresholdUniform, THRESHOLD);
  gl.uniform1f(influenceFactorUniform, influenceFactor);

  let lastFrameTime = Date.now();

  function render() {
    const currentTime = Date.now();
    const deltaTime = (currentTime - lastFrameTime) / 20;
    lastFrameTime = currentTime;
    const canvasWidth = canvas.width;
    const canvasHeight = canvas.height;
    // Move Orbs
    for (let i = 0; i < orbPositions.length; i++) {
      // Update positions
      orbPositions[i][0] += orbSpeeds[i][0] * deltaTime;
      orbPositions[i][1] += orbSpeeds[i][1] * deltaTime;

      // Ensure orbs stay within boundaries
      if (orbPositions[i][0] - orbRadii[i] < 0) {
        orbPositions[i][0] = orbRadii[i];
        orbSpeeds[i][0] = -orbSpeeds[i][0];
      } else if (orbPositions[i][0] + orbRadii[i] >= canvasWidth) {
        orbPositions[i][0] = canvasWidth - orbRadii[i] - 1;
        orbSpeeds[i][0] = -orbSpeeds[i][0];
      }

      if (orbPositions[i][1] - orbRadii[i] < 0) {
        orbPositions[i][1] = orbRadii[i];
        orbSpeeds[i][1] = -orbSpeeds[i][1];
      } else if (orbPositions[i][1] + orbRadii[i] >= canvasHeight) {
        orbPositions[i][1] = canvasHeight - orbRadii[i] - 1;
        orbSpeeds[i][1] = -orbSpeeds[i][1];
      }
    }

    gl.uniform2fv(orbPositionsUniform, orbPositions.flat());
    gl.drawArrays(gl.TRIANGLES, 0, 6);
    requestAnimationFrame(render);
  }

  render();
</script>
